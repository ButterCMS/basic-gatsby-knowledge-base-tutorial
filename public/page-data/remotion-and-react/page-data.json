{"componentChunkName":"component---src-templates-article-details-js","path":"/remotion-and-react","result":{"data":{"allButterPage":{"edges":[{"node":{"kb_article_name":"FAQs: Using React with Remotion","kb_article_body":"<p>React is a beautiful Javascript framework and has sometimes been described as a &ldquo;Learn Once, build anything&rdquo; library. This case is true because the knowledge of React components can be used to develop anything from SPA to MPAs and everything in between. The same also goes for graphics and animations.<br /><br /></p>\r\n<p>In this article, we will learn how to use React components to build and create Videos using<span>&nbsp;</span><a href=\"https://www.remotion.dev/\">Remotion</a>. A demo of what we will be building is below:<br /><br /></p>\r\n<p><img src=\"https://blog.openreplay.com/images/produce-videos-in-react-with-remotion/images/image01.gif\" alt=\"1\" /></p>\r\n<h2 id=\"what-is-remotion\"><strong>What is Remotion?<br /><br /></strong></h2>\r\n<p><a href=\"https://www.remotion.dev/\">Remotion</a><span>&nbsp;</span>is a library suite for programmatically producing videos using React. Remotion enables the creation of actual MP4 videos written in React. It uses web technologies such as CSS, SVG, and WebGL to create fascinating motion graphics. Remotion also allows you to use concepts like functions and variables. You can use JavaScript code to produce video and subsequently render it into an MP4 file with Remotion.<br /><br /></p>\r\n<p>Remotion was created by<span>&nbsp;</span><a href=\"https://github.com/JonnyBurger\">Jonny Burger</a><span>&nbsp;</span>to allow anyone with minimal understanding of React, HTML, CSS, and Javascript the ability to create videos with code. Remotion lowers the barrier into the field of video creation by doing away with the complicated tools and training needed to thrive in the video creation field. Remotion does this by leveraging Javascript developers&rsquo; current tools and allowing them to use those tools and skills to turn code into animations and videos.<br /><br /></p>\r\n<p>Remotion includes a player called Remotion Player, which simulates the experience of an actual video editor and can be used to play and review your video on your browser.<br /><br /></p>\r\n<h2 id=\"getting-started\"><strong>Getting started<br /><br /></strong></h2>\r\n<p>You will need to install two dependencies to use Remotion effectively:<span>&nbsp;</span><a href=\"https://nodejs.org/en/download/\">Node</a><span>&nbsp;</span>and<span>&nbsp;</span><a href=\"https://github.com/adaptlearning/adapt_authoring/wiki/Installing-FFmpeg\">FFmpeg</a>. If you are planning on downloading or extracting your video after creation, you need FFmpeg; otherwise, you can choose not to install it. Once you install the dependencies, run the command below in your terminal to bootstrap a new Remotion app.<br /><br /></p>\r\n<pre class=\"astro-code\"><code><span class=\"line\"><span>npm init video</span></span>\r\n<span class=\"line\"><span># or </span></span>\r\n<span class=\"line\"><span>yarn create video</span></span></code></pre>\r\n<p>You should see a prompt like below to choose a template for your application:</p>\r\n<p><img src=\"https://blog.openreplay.com/images/produce-videos-in-react-with-remotion/images/image02.png\" alt=\"2\" /></p>\r\n<p>You can choose whichever template you want for the given list in the terminal, but for this article, I will use the blank template and explain as we go.</p>\r\n<p>Once Remotion is installed, open it in the code editor of your choice, and let&rsquo;s go over the created files.</p>\r\n<p><img src=\"https://blog.openreplay.com/images/produce-videos-in-react-with-remotion/images/image03.png\" alt=\"3\" /></p>\r\n<p>There are three files that we see in the<span>&nbsp;</span><code>src</code><span>&nbsp;</span>folder. the<span>&nbsp;</span><code>index.tsx</code>, the<span>&nbsp;</span><code>Video.tsx</code>, and the<span>&nbsp;</span><code>Composition.tsx</code></p>\r\n<ul>\r\n<li>The<span>&nbsp;</span><code>index.tsx</code><span>&nbsp;</span>file acts like the<span>&nbsp;</span><code>index.js</code><span>&nbsp;</span>file in a create-react-app (CRA) application. It takes a React component and, via a render function, outputs it as an mp4 video. We won&rsquo;t be modifying anything in this file</li>\r\n<li>The<span>&nbsp;</span><code>Video.tsx</code><span>&nbsp;</span>file acts like the<span>&nbsp;</span><code>App</code><span>&nbsp;</span>component in a React application, which means that it serves as the application&rsquo;s entry point. In this component, we will stitch together different compositions to create the video. The Video.tsx file shows us the first Remotion component, the<span>&nbsp;</span><code>Composition</code>.</li>\r\n<li>The<span>&nbsp;</span><code>Composition.tsx</code><span>&nbsp;</span>is a component that holds and registers the videos that we want to render as well as the stylings and the props for the video</li>\r\n</ul>\r\n<p>Inside the<span>&nbsp;</span><code>Composition.tsx</code><span>&nbsp;</span>file, we see the code below, which shows that we are currently returning nothing:</p>\r\n<pre class=\"astro-code\"><code><span class=\"line\"><span>export</span><span> </span><span>const</span><span> </span><span>MyComposition</span><span> </span><span>=</span><span> () </span><span>=&gt;</span><span> {</span></span>\r\n<span class=\"line\"><span>  </span><span>return</span><span> </span><span>null</span><span>;</span></span>\r\n<span class=\"line\"><span>};</span></span></code></pre>\r\n<p>Inside the<span>&nbsp;</span><code>Video.tsx</code><span>&nbsp;</span>file, we see the code block below:</p>\r\n<pre class=\"astro-code\"><code><span class=\"line\"><span>import</span><span> {Composition} </span><span>from</span><span> </span><span>'remotion'</span><span>;</span></span>\r\n<span class=\"line\"><span>import</span><span> {MyComposition} </span><span>from</span><span> </span><span>'./Composition'</span><span>;</span></span>\r\n<span class=\"line\"><span>export</span><span> </span><span>const</span><span> </span><span>RemotionVideo</span><span>:</span><span> </span><span>React</span><span>.</span><span>FC</span><span> </span><span>=</span><span> () </span><span>=&gt;</span><span> {</span></span>\r\n<span class=\"line\"><span>  </span><span>return</span><span> (</span></span>\r\n<span class=\"line\"><span>    &lt;&gt;</span></span>\r\n<span class=\"line\"><span>      &lt;</span><span>Composition</span></span>\r\n<span class=\"line\"><span>        </span><span>id</span><span>=</span><span>\"MyComp\"</span></span>\r\n<span class=\"line\"><span>        </span><span>component</span><span>={</span><span>MyComposition</span><span>}</span></span>\r\n<span class=\"line\"><span>        </span><span>durationInFrames</span><span>={</span><span>60</span><span>}</span></span>\r\n<span class=\"line\"><span>        </span><span>fps</span><span>={</span><span>30</span><span>}</span></span>\r\n<span class=\"line\"><span>        </span><span>width</span><span>={</span><span>1280</span><span>}</span></span>\r\n<span class=\"line\"><span>        </span><span>height</span><span>={</span><span>720</span><span>}</span></span>\r\n<span class=\"line\"><span>      /&gt;</span></span>\r\n<span class=\"line\"><span>    &lt;/&gt;</span></span>\r\n<span class=\"line\"><span>  );</span></span>\r\n<span class=\"line\"><span>};</span></span></code></pre>\r\n<ul>\r\n<li>The<span>&nbsp;</span><code>id</code><span>&nbsp;</span>is used when you want to export the video, and we will get into what it does in the<span>&nbsp;</span><a href=\"https://www.dropbox.com/scl/fi/t2g1zrsyhfj5m9pioslgw/Untitled-7.paper?dl=0&amp;rlkey=06w1aeocalfdf3qpuugqa9omr#:uid=846526813490374854414472&amp;h2=Exporting-the-video\">exporting the video</a><span>&nbsp;</span>section.</li>\r\n<li>The<span>&nbsp;</span><code>Component</code><span>&nbsp;</span>takes the imported<span>&nbsp;</span><code>Composition</code><span>&nbsp;</span>component.</li>\r\n<li>The<span>&nbsp;</span><code>durationInFrames</code><span>&nbsp;</span>is the number of frames to be generated.</li>\r\n<li>The<span>&nbsp;</span><code>fps</code><span>&nbsp;</span>is the rate of the frame per second. The<span>&nbsp;</span><code>durationInFrames</code><span>&nbsp;</span>divided by the<span>&nbsp;</span><code>fps</code><span>&nbsp;</span>is used to calculate the length of the video.</li>\r\n<li>The<span>&nbsp;</span><code>width</code><span>&nbsp;</span>is the width of the video in pixels</li>\r\n<li>The<span>&nbsp;</span><code>height</code><span>&nbsp;</span>is the height of the video in pixels</li>\r\n</ul>\r\n<p>When we run<span>&nbsp;</span><code>yarn start</code><span>&nbsp;</span>to start up the development server, we see a 2-second long video of an empty canvas on<span>&nbsp;</span><code>localhost:3000</code><span>&nbsp;</span>- not very interesting, for sure!</p>\r\n<h2 id=\"creating-our-video\">Creating our video</h2>\r\n<p>To get started, navigate to the<span>&nbsp;</span><code>Composition.tsx</code><span>&nbsp;</span>file and add the code below:</p>\r\n<pre class=\"astro-code\"><code><span class=\"line\"><span>export</span><span> </span><span>const</span><span> </span><span>MyComposition</span><span> </span><span>=</span><span> () </span><span>=&gt;</span><span> {</span></span>\r\n<span class=\"line\"><span>  </span><span>return</span><span> (</span></span>\r\n<span class=\"line\"><span>    &lt;</span><span>div</span></span>\r\n<span class=\"line\"><span>      </span><span>style</span><span>={</span><span>{</span></span>\r\n<span class=\"line\"><span>        width: </span><span>'100%'</span><span>,</span></span>\r\n<span class=\"line\"><span>        height: </span><span>'100%'</span><span>,</span></span>\r\n<span class=\"line\"><span>        backgroundColor: </span><span>'#f2511b'</span><span>,</span></span>\r\n<span class=\"line\"><span>        color: </span><span>'#fff'</span><span>,</span></span>\r\n<span class=\"line\"><span>        textAlign: </span><span>'center'</span><span>,</span></span>\r\n<span class=\"line\"><span>        alignItems: </span><span>'center'</span><span>,</span></span>\r\n<span class=\"line\"><span>        justifyContent: </span><span>'center'</span><span>,</span></span>\r\n<span class=\"line\"><span>        fontSize: </span><span>'2rem'</span><span>,</span></span>\r\n<span class=\"line\"><span>      }</span><span>}</span></span>\r\n<span class=\"line\"><span>    &gt;</span></span>\r\n<span class=\"line\"><span>      &lt;</span><span>h1</span><span>&gt;</span></span>\r\n<span class=\"line\"><span>        My name is Isaac Okoro. A fullstack developer and technical writer for the OpenReplay blog</span></span>\r\n<span class=\"line\"><span>      &lt;/</span><span>h1</span><span>&gt;</span></span>\r\n<span class=\"line\"></span>\r\n<span class=\"line\"><span>    &lt;/</span><span>div</span><span>&gt;</span></span>\r\n<span class=\"line\"><span>  );</span></span>\r\n<span class=\"line\"><span>};</span></span></code></pre>\r\n<p>The code above is pretty basic as we have a<span>&nbsp;</span><code>div</code><span>&nbsp;</span>with some inline styles and an<span>&nbsp;</span><code>h1</code><span>&nbsp;</span>tag with some content.</p>\r\n<p>When we save and navigate to the browser, we should see a video that looks like the gif below:</p>\r\n<p><img src=\"https://blog.openreplay.com/images/produce-videos-in-react-with-remotion/images/image04.gif\" alt=\"4\" /></p>\r\n<h2 id=\"getting-properties\">Getting properties</h2>\r\n<p>We will use a hook from Remotion to get the properties of our video. The hook is<span>&nbsp;</span><a href=\"https://www.remotion.dev/docs/use-video-config#:~:text=Namely%2C%20useVideoConfig%20will%20return%20an,composition%2C%20in%20frames%20per%20seconds.\">useVideoConfig()</a>. That hook retrieves returns an object with information about the context of the video that we are making. The properties contained in the object include width, height, fps, durationInFrames, etc.</p>\r\n<p>We will use the information exposed to us by the<span>&nbsp;</span><code>useVideoConfig()</code><span>&nbsp;</span>hook to render the properties of our video.</p>\r\n<pre class=\"astro-code\"><code><span class=\"line\"><span>import</span><span> { useVideoConfig } </span><span>from</span><span> </span><span>'remotion'</span><span>;</span></span>\r\n<span class=\"line\"><span>export</span><span> </span><span>const</span><span> </span><span>MyComposition</span><span> </span><span>=</span><span> () </span><span>=&gt;</span><span> {</span></span>\r\n<span class=\"line\"><span>  </span><span>const</span><span> {</span><span>width</span><span>, </span><span>height</span><span>, </span><span>fps</span><span>, </span><span>durationInFrames</span><span>} </span><span>=</span><span> </span><span>useVideoConfig</span><span>();</span></span>\r\n<span class=\"line\"></span>\r\n<span class=\"line\"><span>  </span><span>return</span><span> (</span></span>\r\n<span class=\"line\"><span>    &lt;</span><span>div</span></span>\r\n<span class=\"line\"><span>      </span><span>style</span><span>={</span><span>{</span></span>\r\n<span class=\"line\"><span>        width: </span><span>'100%'</span><span>,</span></span>\r\n<span class=\"line\"><span>        height: </span><span>'100%'</span><span>,</span></span>\r\n<span class=\"line\"><span>        backgroundColor: </span><span>'#f2511b'</span><span>,</span></span>\r\n<span class=\"line\"><span>        color: </span><span>'#fff'</span><span>,</span></span>\r\n<span class=\"line\"><span>        textAlign: </span><span>'center'</span><span>,</span></span>\r\n<span class=\"line\"><span>        alignItems: </span><span>'center'</span><span>,</span></span>\r\n<span class=\"line\"><span>        justifyContent: </span><span>'center'</span><span>,</span></span>\r\n<span class=\"line\"><span>        fontSize: </span><span>'2rem'</span><span>,</span></span>\r\n<span class=\"line\"><span>      }</span><span>}</span></span>\r\n<span class=\"line\"><span>    &gt;</span></span>\r\n<span class=\"line\"><span>      &lt;</span><span>h1</span><span>&gt;</span></span>\r\n<span class=\"line\"><span>        My name is Isaac Okoro. A fullstack developer and technical writer for the OpenReplay blog</span></span>\r\n<span class=\"line\"><span>      &lt;/</span><span>h1</span><span>&gt;</span></span>\r\n<span class=\"line\"><span>      &lt;</span><span>h3</span><span>&gt;</span></span>\r\n<span class=\"line\"><span>      This </span><span>{</span><span>width</span><span>}</span><span> * </span><span>{</span><span>height</span><span>}</span><span>px video is </span><span>{</span><span>durationInFrames </span><span>/</span><span> fps</span><span>}</span><span>secs long and</span></span>\r\n<span class=\"line\"><span>      was made to showcase Remotion</span></span>\r\n<span class=\"line\"><span>      &lt;/</span><span>h3</span><span>&gt; </span></span>\r\n<span class=\"line\"><span>    &lt;/</span><span>div</span><span>&gt;</span></span>\r\n<span class=\"line\"><span>  );</span></span>\r\n<span class=\"line\"><span>};</span></span></code></pre>\r\n<p>In the code block above, we imported the<span>&nbsp;</span><code>useVideoConfig()</code><span>&nbsp;</span>hook from Remotion. Next, we got the information about the video from the hook and rendered it.</p>\r\n<p>When we save and navigate to the browser, we should see a video that looks like the gif below:</p>\r\n<p><img src=\"https://blog.openreplay.com/images/produce-videos-in-react-with-remotion/images/image05.gif\" alt=\"5\" /></p>\r\n<p><strong>Note</strong>: We are getting 2 seconds as our time because we didn&rsquo;t change the number of the<span>&nbsp;</span><code>durationInFrames</code><span>&nbsp;</span>in the<span>&nbsp;</span><code>Video.tsx</code><span>&nbsp;</span>file. Navigate to the<span>&nbsp;</span><code>Video.tsx</code><span>&nbsp;</span>file and change the number of the<span>&nbsp;</span><code>durationInFrames</code><span>&nbsp;</span>to 120 as shown below to get 4 secs:</p>\r\n<pre class=\"astro-code\"><code><span class=\"line\"><span>durationInFrames</span><span>=</span><span>{</span><span>120</span><span>}</span></span></code></pre>\r\n<h2 id=\"adding-opacity\">Adding opacity</h2>\r\n<p>In the demo gif, we see that the screen starts dark and gets progressively brighter as the video continues. We will implement that feature in this section.</p>\r\n<p>To do that, we will need to know the current frame of the video at every point in time. Thankfully, Remotion gives us a hook for that known as the<span>&nbsp;</span><code>[useCurrentFrame()](https://www.remotion.dev/docs/use-current-frame)</code><span>&nbsp;</span>hook. This hook retrieves the current frame of the video.</p>\r\n<pre class=\"astro-code\"><code><span class=\"line\"><span>import</span><span> { useVideoConfig, useCurrentFrame } </span><span>from</span><span> </span><span>'remotion'</span><span>;</span></span>\r\n<span class=\"line\"></span>\r\n<span class=\"line\"><span>export</span><span> </span><span>const</span><span> </span><span>MyComposition</span><span> </span><span>=</span><span> () </span><span>=&gt;</span><span> {</span></span>\r\n<span class=\"line\"><span>  </span><span>const</span><span> {</span><span>width</span><span>, </span><span>height</span><span>, </span><span>fps</span><span>, </span><span>durationInFrames</span><span>} </span><span>=</span><span> </span><span>useVideoConfig</span><span>();</span></span>\r\n<span class=\"line\"><span>  </span><span>const</span><span> </span><span>frame</span><span> </span><span>=</span><span> </span><span>useCurrentFrame</span><span>();</span></span>\r\n<span class=\"line\"><span>  </span><span>const</span><span> </span><span>opacity</span><span> </span><span>=</span><span> frame </span><span>/</span><span> durationInFrames;</span></span>\r\n<span class=\"line\"><span>  </span><span>return</span><span> (</span></span>\r\n<span class=\"line\"><span>    &lt;</span><span>div</span></span>\r\n<span class=\"line\"><span>      </span><span>style</span><span>={</span><span>{</span></span>\r\n<span class=\"line\"><span>          </span><span>// Inline styles remain the same</span></span>\r\n<span class=\"line\"><span>        opacity,</span></span>\r\n<span class=\"line\"><span>      }</span><span>}</span></span>\r\n<span class=\"line\"><span>    &gt;</span></span>\r\n<span class=\"line\"><span>      // Nothing changes here</span></span>\r\n<span class=\"line\"><span>    &lt;/</span><span>div</span><span>&gt;</span></span>\r\n<span class=\"line\"><span>  );</span></span>\r\n<span class=\"line\"><span>};</span></span></code></pre>\r\n<p>In the code block above, we imported the<span>&nbsp;</span><code>useCurrentFrame()</code><span>&nbsp;</span>hook and stored it in a frame variable. Next, we created an<span>&nbsp;</span><code>opacity</code><span>&nbsp;</span>variable, the<span>&nbsp;</span><code>frame</code><span>&nbsp;</span>variable divided by the<span>&nbsp;</span><code>durationInFrames</code>. After that, we passed the opacity to the inline styles.</p>\r\n<p>Save the file and view the results in the browser, which should look like the gif below:</p>\r\n<p><img src=\"https://blog.openreplay.com/images/produce-videos-in-react-with-remotion/images/image06.gif\" alt=\"6 User-uploaded image: chrome-capture-2022-6-16.gif\" /></p>\r\n<h2 id=\"open-source-session-replay\">Open Source Session Replay</h2>\r\n<p><em><a href=\"https://github.com/openreplay/openreplay\">OpenReplay</a><span>&nbsp;</span>is an open-source, session replay suite that lets you see what users do on your web app, helping you troubleshoot issues faster. OpenReplay is self-hosted for full control over your data.</em></p>\r\n<p><img src=\"https://static.openreplay.com/images/banner-blog.png\" alt=\"replayer.png\" /></p>\r\n<p><em>Start enjoying your debugging experience -<span>&nbsp;</span><a href=\"https://github.com/openreplay/openreplay\">start using OpenReplay for free</a>.</em></p>\r\n<h2 id=\"exporting-the-video\">Exporting the video</h2>\r\n<p>When rendering your video, make use that the<span>&nbsp;</span><code>id</code><span>&nbsp;</span>in the<span>&nbsp;</span><code>video.tsx</code><span>&nbsp;</span>file matches exactly with the title in the build section of your scripts. I changed the name of my<span>&nbsp;</span><code>id</code><span>&nbsp;</span>to &ldquo;MyVideo&rdquo; and also changed it in the build section of my script to &ldquo;MyVideo&rdquo; as shown in the images below:</p>\r\n<p><img src=\"https://blog.openreplay.com/images/produce-videos-in-react-with-remotion/images/image07.png\" alt=\"7\" /></p>\r\n<p><img src=\"https://blog.openreplay.com/images/produce-videos-in-react-with-remotion/images/image08.png\" alt=\"8\" /></p>\r\n<p>With that done, run<span>&nbsp;</span><code>yarn build</code><span>&nbsp;</span>to export your video, and you should be presented with the image below:</p>\r\n<p><img src=\"https://blog.openreplay.com/images/produce-videos-in-react-with-remotion/images/image09.png\" alt=\"9\" /></p>\r\n<p>A link to the video on Github can be found<span>&nbsp;</span><a href=\"https://github.com/IsaacThaJunior/working-with-remotion/blob/main/out/video.mp4\">here</a>, and the complete code for this tutorial can be found<span>&nbsp;</span><a href=\"https://github.com/IsaacThaJunior/working-with-remotion\">here</a>.</p>\r\n<h2 id=\"conclusion\">Conclusion</h2>\r\n<p>This article has covered Remotion and some of its amazing features. Remotion is still relatively new, but there are pleasant surprises ahead. Remotion also comes with standard features like data fetching and Server-side Rendering capabilities. Feel free to check out the Remotion Docs<span>&nbsp;</span><a href=\"https://www.remotion.dev/blog\">here</a><span>&nbsp;</span>and expand on the features found in this article.</p>\r\n<p>\r\n<script src=\"chrome-extension://lopnbnfpjmgpbppclhclehhgafnifija/aiscripts/script-main.js\"></script>\r\n<quillbot-extension-portal></quillbot-extension-portal></p>\r\n<p>\r\n<script src=\"chrome-extension://lopnbnfpjmgpbppclhclehhgafnifija/aiscripts/t.js\"></script>\r\n<script src=\"chrome-extension://lopnbnfpjmgpbppclhclehhgafnifija/aiscripts/script-main.js\"></script>\r\n<quillbot-extension-portal></quillbot-extension-portal></p>\r\n<p></p>\r\n<p></p>","slug":"remotion-and-react"}}]}},"pageContext":{"slug":"remotion-and-react"}},"staticQueryHashes":[]}