{"componentChunkName":"component---src-templates-article-details-js","path":"/guide-to-using-cypress","result":{"data":{"allButterPage":{"edges":[{"node":{"kb_article_name":"How to Guide to using Cypress for testing","kb_article_body":"<p><img src=\"https://cdn.buttercms.com/V9uIxtV8Rme0q0TFklXd\" alt=\"pexels-pixabay-270404.jpeg\" /></p>\r\n<p><br />The importance of writing tests for your application should not be underestimated. Yes, writing tests can be more demanding than it seems and might seem insignificant sometimes, but they are crucial for maintaining a bug-free application.<br /><br /></p>\r\n<p>Cypress is a Javascript-based front-end testing tool. It is a user-friendly application for developers that runs in the browser and aids QA engineers and developers with test automation.<br /><br /></p>\r\n<p></p>\r\n<p>Best practices are professional procedures that are widely accepted as being correct or most effective. When best practices are appropriately adhered to during application testing, it results in high-performing application software that delights developers and customers by working as intended.<br /><br /></p>\r\n<p></p>\r\n<p>This article will cover some best practices to use when testing applications with Cypress. As much as the practices covered in this article are Cypress oriented, they can still be applied to any testing platform. The following sections will cover some widely accepted procedures that should be followed when using Cypress for software testing.<br /><br /></p>\r\n<h2 id=\"selecting-elements-with-data--attributes-to-provide-context\"><strong>Selecting elements with&nbsp;<code>data-*</code>&nbsp;attributes to provide context<br /><br /></strong></h2>\r\n<p></p>\r\n<p>Data attributes are single-value descriptors for data points or data objects. When testing applications with Cypress, you will use selectors for elements in every test you write. A good idea to save resources and hassles is to make sure you create selectors that can withstand changes. These changes can come from modifications made to Javascript behavior or CSS styles during development.</p>\r\n<p>The best way to avoid these issues is to use custom<span>&nbsp;</span><code>data-*</code><span>&nbsp;</span>attributes that are resilient to change and clearly describe their purpose. Some examples are shown in the code block below:</p>\r\n<pre class=\"astro-code\"><code><span class=\"line\"><span>// Do this</span></span>\r\n<span class=\"line\"><span>cy.</span><span>get</span><span>(</span><span>'[data-cy=\"button\"]'</span><span>);</span></span>\r\n<span class=\"line\"><span>cy.</span><span>get</span><span>(</span><span>'[data-test-id=\"image\"]'</span><span>);</span></span>\r\n<span class=\"line\"></span>\r\n<span class=\"line\"><span>// Avoid doing this</span></span>\r\n<span class=\"line\"><span>cy.</span><span>get</span><span>(</span><span>'image'</span><span>);          </span><span>// This is too generic      </span></span>\r\n<span class=\"line\"><span>cy.</span><span>get</span><span>(</span><span>'#button'</span><span>);        </span><span>// This can be modified by JS or CSS</span></span></code></pre>\r\n<p>As you can see from the above example, you should avoid using ids, tags, class names, or other generic identifiers when writing tests for your applications.</p>\r\n<h2 id=\"avoid-testing-3rd-party-servers-that-you-dont-control-and-use-cyrequest-when-you-want-to-do-so\">Avoid testing 3rd party servers that you don&rsquo;t control and use<span>&nbsp;</span><code>cy.request</code><span>&nbsp;</span>when you want to do so</h2>\r\n<p>There are lots of reasons why you might want to visit or involve 3rd party servers when writing tests for your application. Some of the reasons might include the following:</p>\r\n<ul>\r\n<li>Testing OAuth login when your app uses a different supplier.</li>\r\n<li>Examining your email to check whether a &ldquo;forgotten password&rdquo; email was issued by your server.</li>\r\n</ul>\r\n<p>It is, however, not recommended that you use your UI to visit a 3rd party site when running tests and some reasons for that include the following:</p>\r\n<ul>\r\n<li>\r\n<p>It takes a long time and makes your tests take longer.</p>\r\n</li>\r\n<li>\r\n<p>The content of the third-party website may have been updated or changed.</p>\r\n</li>\r\n<li>\r\n<p>There can be problems with the 3rd party servers beyond your control.</p>\r\n</li>\r\n</ul>\r\n<p>Now, there might be occasions when your application might need to interact with 3rd party servers. On those occasions, it is recommended that you use the<span>&nbsp;</span><code>cy.request</code><span>&nbsp;</span>command to programmatically interact with those servers.</p>\r\n<h2>Open Source Session Replay</h2>\r\n<p><i><a href=\"https://github.com/openreplay/openreplay\" target=\"_blank\" rel=\"noopener\">OpenReplay</a><span>&nbsp;</span>is an open-source, session replay suite that lets you see what users do on your web app, helping you troubleshoot issues faster. OpenReplay is self-hosted for full control over your data.</i><span></span><img alt=\"OpenReplay\" width=\"768\" height=\"400\" src=\"https://blog.openreplay.com/assets/banner-blog_1oYPGT.png\" class=\"astro-UXNKDZ4E\" loading=\"lazy\" decoding=\"async\" /><i>Start enjoying your debugging experience -<span>&nbsp;</span><a href=\"https://github.com/openreplay/openreplay\">start using OpenReplay for free</a>.</i><span></span></p>\r\n<h2 id=\"setting-a-base-url\">Setting a Base URL</h2>\r\n<p>Globally setting a base URL in your Cypress configuration file is another best practice when testing your applications with Cypress. Not only does it help your tests run more efficiently, but it also makes it simpler to swap the test suite between various contexts, such as a development site and a live website. An example of this is shown below:</p>\r\n<pre class=\"astro-code\"><code><span class=\"line\"><span>    </span><span>// cypress.config.js</span></span>\r\n<span class=\"line\"><span>    </span><span>import</span><span> { defineConfig } </span><span>from</span><span> </span><span>'cypress'</span></span>\r\n<span class=\"line\"><span>    </span></span>\r\n<span class=\"line\"><span>    </span><span>export</span><span> </span><span>default</span><span> </span><span>defineConfig</span><span>({</span></span>\r\n<span class=\"line\"><span>      </span><span>e2e: {</span></span>\r\n<span class=\"line\"><span>        baseUrl: </span><span>'http://localhost:3000'</span></span>\r\n<span class=\"line\"><span>      }</span></span>\r\n<span class=\"line\"><span>    </span><span>})</span></span></code></pre>\r\n<p>By setting the base URL in your config file, you can shorten the URLs in your tests from</p>\r\n<pre class=\"astro-code\"><code><span class=\"line\"><span>    cy.</span><span>visit</span><span>(</span><span>'http://localhost:3000/index.html'</span><span>)</span></span></code></pre>\r\n<p>to</p>\r\n<pre class=\"astro-code\"><code><span class=\"line\"><span>    cy.</span><span>visit</span><span>(</span><span>'index.html'</span><span>)</span></span></code></pre>\r\n<p>When you are ready to switch to the production site, changing the base URL from one location is easier. An added benefit is that adding a base URL saves some time during Cypress test startup.</p>\r\n<h2 id=\"avoid-using-cywait-with-a-number\">Avoid using<span>&nbsp;</span><code>cy.wait</code><span>&nbsp;</span>with a number</h2>\r\n<p>Using the<span>&nbsp;</span><code>cy.wait</code><span>&nbsp;</span>command with a fixed number is a typical Cypress error. You often want to wait for an element to appear or a network request to complete before moving on, so you do this. Use<span>&nbsp;</span><code>cy.wait</code><span>&nbsp;</span>with a number to make sure that commands have completed running to stop unpredictable failures.</p>\r\n<p>This has the drawback of making you wait longer than is required. If you set<span>&nbsp;</span><code>cy.wait</code><span>&nbsp;</span>to wait for a network request for 5000 milliseconds, but the request only takes 500 milliseconds, you have unnecessarily extended the execution speed of your tests by 4500 milliseconds.</p>\r\n<p>Using<span>&nbsp;</span><code>cy.wait</code><span>&nbsp;</span>is also unnecessary because, on many occasions, you will be making that request with the<span>&nbsp;</span><code>cy.request</code><span>&nbsp;</span>command, and the<span>&nbsp;</span><code>cy.request</code><span>&nbsp;</span>command will not resolve until it receives a response. Instead of using<span>&nbsp;</span><code>cy.wait</code><span>&nbsp;</span>with a number, use it with an alias to guarantee that the condition you are waiting on is satisfied. This example is shown in the code block below:</p>\r\n<pre class=\"astro-code\"><code><span class=\"line\"><span>cy.</span><span>request</span><span>(</span><span>'GET'</span><span>, </span><span>'/users'</span><span>, [{ name: </span><span>'Maggy'</span><span> }, { name: </span><span>'Joan'</span><span> }]).</span><span>as</span><span>(</span></span>\r\n<span class=\"line\"><span>  </span><span>'getUsers'</span></span>\r\n<span class=\"line\"><span>)</span></span>\r\n<span class=\"line\"><span>cy.</span><span>wait</span><span>(</span><span>'@getUsers'</span><span>) </span><span>// &lt;--- wait explicitly for the request to finish</span></span></code></pre>\r\n<p>In the above example, we made a<span>&nbsp;</span><code>GET</code><span>&nbsp;</span>request, and instead of using<span>&nbsp;</span><code>cy.wait</code><span>&nbsp;</span>with a number, we explicitly waited for the request to pass using an alias.</p>\r\n<h2 id=\"conclusion\">Conclusion</h2>\r\n<p>This article has looked at some best practices to follow when using Cypress for running tests to avoid having brittle tests in your application. You can find more best practices by visiting Cypress Best Practices Guide<span>&nbsp;</span><a href=\"https://docs.cypress.io/guides/references/best-practices#Unnecessary-Waiting\">here</a>.</p>\r\n<p>\r\n<script src=\"chrome-extension://lopnbnfpjmgpbppclhclehhgafnifija/aiscripts/t.js\"></script>\r\n<script src=\"chrome-extension://lopnbnfpjmgpbppclhclehhgafnifija/aiscripts/script-main.js\"></script>\r\n<quillbot-extension-portal></quillbot-extension-portal></p>\r\n<p><quillbot-extension-portal></quillbot-extension-portal></p>\r\n<p><quillbot-extension-portal></quillbot-extension-portal></p>\r\n<p></p>\r\n<p>\r\n<script src=\"chrome-extension://lopnbnfpjmgpbppclhclehhgafnifija/aiscripts/t.js\"></script>\r\n<script src=\"chrome-extension://lopnbnfpjmgpbppclhclehhgafnifija/aiscripts/script-main.js\"></script>\r\n<quillbot-extension-portal></quillbot-extension-portal></p>","slug":"guide-to-using-cypress"}}]}},"pageContext":{"slug":"guide-to-using-cypress"}},"staticQueryHashes":[]}