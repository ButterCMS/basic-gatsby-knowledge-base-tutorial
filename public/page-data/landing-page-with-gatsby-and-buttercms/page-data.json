{"componentChunkName":"component---src-templates-article-details-js","path":"/landing-page-with-gatsby-and-buttercms","result":{"data":{"allButterPage":{"edges":[{"node":{"kb_article_name":"How to Build Flexible Landing Pages with Gatsby and ButterCMS","kb_article_body":"<p><span><img src=\"https://cdn.buttercms.com/tXHCZoSLTYq67zPAMkv7\" alt=\"undefined\" style=\"display: block; margin-left: auto; margin-right: auto;\" /></span></p>\r\n<p><span>&nbsp;</span></p>\r\n<p><span>Landing pages are standalone web pages made especially for marketing or advertising efforts. They are the pages that visitors \"land\" on after clicking on an email link, an advertisement from Google, a Twitter link, or any other comparable website. Landing pages can also be&nbsp;</span><span>Search Engine Results Pages (SERPs), depending on your search</span><span>. This article will cover how to build and add landing pages to a</span><a href=\"https://www.gatsbyjs.com/\" rel=\"follow noopener\" target=\"_blank\"><span>&nbsp;</span><strong>Gatsby</strong></a><span>&nbsp;application. We will be fetching most of the data for our landing page from a&nbsp;<strong><a href=\"/blog/what-is-headless-cms/\" rel=\"follow\">headless CMS</a></strong>&mdash;</span><span>ButterCMS</span><span>&nbsp;to be precise.&nbsp;<br /><br /></span></p>\r\n<p><span></span></p>\r\n<h2 id=\"why-use-gatsby\"><strong>Why use Gatsby?<br /><br /></strong></h2>\r\n<p><span>There are lots of reasons for using&nbsp;<a href=\"/blog/gatsby-blog-tutorial/\" rel=\"follow\">Gatsby</a>&nbsp;to create your applications. Some of them include performance, quality web experiences, speed, and different pre-rendering techniques.<br /><br /></span><span></span></p>\r\n<p><span>Gatsby is an open-source&nbsp;<strong><a href=\"/blog/what-is-a-static-site/\" rel=\"follow\">static site</a></strong>&nbsp;generator (SSG) that uses GraphQL and Webpack as well as the front-end development framework React. It is used to create static web pages that adhere to the most recent web standards, are progressive web applications (PWA), and are speed- and security-optimized.<br /><br /></span><span></span></p>\r\n<p><span>The&nbsp;<strong><a href=\"/blog/what-is-jamstack/\" rel=\"follow\">Jamstack architecture</a></strong>, which combines JavaScript, APIs, and HTML without requiring a database or server-side programming language, powers Gatsby websites. With faster load times and simpler hosting and development, it is possible for Gatsby sites to be hosted by various means, such as through a content delivery network (CDN) or object storage service.<br /><br /></span><span></span></p>\r\n<p><span>Performance is another priority when creating Gatsby websites. The end-user experience is significantly enhanced by pre-rendering pages as it decreases the requirement for servers to produce pages.<br /><br /></span></p>\r\n<h2 id=\"why-use-buttercms\"><strong>Why use ButterCMS?<br /><br /></strong></h2>\r\n<p><strong><a href=\"/\" rel=\"follow\">ButterCMS</a></strong><span>&nbsp;is an amazing content management system built for a headless architecture. It is easy to use, comes with a nice component approach, and has great performance. The ButterCMS API is quick, straightforward, and simple to integrate into any application of your choice. Additionally,&nbsp;<strong><a href=\"/blog/buttercms-sdks-complete-overview/\" rel=\"follow\">they offer SDKs for numerous programming languages</a></strong>. Butter stores multimedia materials on a low-latency CDN.<br /><br /></span><span></span></p>\r\n<p><span>A headless CMS also offloads a lot of our work, freeing us up to concentrate on business needs. For instance, we may rely on the dashboard to give content editors a strong tool. The ability for editors to schedule content publication is a cool tool and makes ButterCMS a pleasure to work with. You can compose your content in advance and trust ButterCMS for publishing whenever you want. Additionally, we can configure roles and users by using the ButterCMS admin interface.</span><span></span></p>\r\n<p><a href=\"/gatsbyjs-cms/\" title=\"Gatsby CMS banner CTA\" rel=\"follow\"><span><img loading=\"lazy\" src=\"https://cdn.buttercms.com/ldsvyUQqOBQOtCVbstJw\" alt=\"banner-cta-gatsby-border.webp\" /></span></a></p>\r\n<h2 id=\"tutorial-creating-landing-pages-with-gatsby-and-buttercms\"><span>Tutorial: Creating landing pages with Gatsby and ButterCMS</span></h2>\r\n<p><span>We will be creating a landing page together from scratch in this section with Gatsby and</span><a href=\"https://tailwindcss.com/\" rel=\"follow noopener\" target=\"_blank\"><span>&nbsp;</span><strong>TailwindCSS</strong></a><span><strong>.</strong>&nbsp;We will put all the data in the application from the start and later we will transfer the data to ButterCMS and then fetch it from there. We will be working with TailwindCSS as it is a CSS framework built with utility in mind. It is low-level, extremely adaptable, and provides all the building blocks required to create custom designs without requiring you to struggle to override obnoxiously opinionated styles. Below is a preview of what we will be building:&nbsp;</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/SQ9ktvVcSzykm68W6NXg\" alt=\"Rendered landing page\" /></p>\r\n<h3><span>Prerequisites</span></h3>\r\n<p><span>The following requirements are needed to follow along in this tutorial:</span></p>\r\n<ul>\r\n<li aria-level=\"1\"><span>Good grasp of JavaScript, Gatsby, React components, and hooks</span></li>\r\n<li aria-level=\"1\"><span>An understanding of APIs and how to fetch data from them&nbsp;</span></li>\r\n<li aria-level=\"1\"><span>How content management systems (CMSs) work</span></li>\r\n<li aria-level=\"1\"><span>CSS and how TailwindCSS works</span></li>\r\n<li aria-level=\"1\"><span>A&nbsp;</span><a href=\"/join/\"><span><b>ButterCMS account</b></span></a></li>\r\n<li aria-level=\"1\"><span>The</span><a href=\"https://www.gatsbyjs.com/docs/reference/gatsby-cli\"><span>&nbsp;</span><strong><span>Gatsby CLI</span></strong></a><span><strong>&nbsp;</strong>installed</span></li>\r\n<li aria-level=\"1\"><span>Node.js installed</span></li>\r\n<li aria-level=\"1\"><a href=\"https://axios-http.com/docs/intro\"><span><b>Axios</b></span></a><span>&nbsp;installed&nbsp;</span></li>\r\n</ul>\r\n<p><span>Let's get started!!</span></p>\r\n<h2 id=\"bootstrap-your-gastby-app\"><span>Bootstrap your Gatsby app</span></h2>\r\n<p><span>Before creating a new Gatsby application, you need to make sure that you have the Gatsby CLI installed on your system. You can see how to get it from</span><a href=\"https://www.gatsbyjs.com/docs/reference/gatsby-cli\" rel=\"follow noopener\" target=\"_blank\"><span>&nbsp;</span><strong>here</strong></a><span><strong>.</strong>&nbsp;Once you have that installed, go ahead and run the command below on your terminal to create a new Gatsby app:</span></p>\r\n<pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\">npm</span> init gatsby\r\n</code></pre>\r\n<p><span>Answer the questions from the prompts and in no time you will have your created project.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/tTFRpbuzRXi9mg6bBEnn\" alt=\"Answer the questions from Gatsby to create your project\" /></p>\r\n<p><span>The image above shows what you should see on your terminal after creating a Gatsby project. Next, navigate to the project folder and open it in the code editor of your choice.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/Yor8jDUbRp6TrGR7rj1e\" alt=\"navigate to the project folder and open it in the code editor\" /></p>\r\n<h2 id=\"installing-tailwindcss\"><span>Installing TailwindCSS</span></h2>\r\n<p><span>Let&rsquo;s learn how to install and use TailwindCSS in our Gatsby application. First, we run the command below to install Tailwind and its peer dependencies:</span></p>\r\n<pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\">npm</span> install -D tailwindcss postcss autoprefixer gatsby-plugin-postcssnpx \r\ntailwindcss init -p</code></pre>\r\n<p><span>The next thing we need to do is to enable the Gatsby PostCSS plugin. In the&nbsp;</span><code><span>gatsby-config.js</span></code><span>&nbsp;file, enable the&nbsp;</span><code><span>gatsby-plugin-postcss</span></code><span>:</span></p>\r\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// gatsby.config.js</span>\r\n<span class=\"hljs-built_in\">module</span>.exports = {\r\n  plugins: [\r\n    <span class=\"hljs-string\">'gatsby-plugin-postcss'</span>,\r\n    <span class=\"hljs-comment\">// ...</span>\r\n  ],\r\n}</code></pre>\r\n<p><span>Next, add the paths to the Tailwind template files in the&nbsp;</span><code><span>tailwind.config.js</span></code><span>&nbsp;file:</span></p>\r\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// tailwind.config.js</span>\r\n\r\n<span class=\"hljs-comment\">/** @type {import('tailwindcss').Config} */</span>\r\n<span class=\"hljs-built_in\">module</span>.exports = {\r\n  content: [\r\n    <span class=\"hljs-string\">\"./src/pages/**/*.{js,jsx,ts,tsx}\"</span>,\r\n    <span class=\"hljs-string\">\"./src/components/**/*.{js,jsx,ts,tsx}\"</span>,\r\n  ],\r\n  theme: {\r\n    extend: {},\r\n  },\r\n  plugins: [],\r\n}</code></pre>\r\n<p><span>Create a&nbsp;</span><code><span>styles/global.css</span></code><span>&nbsp;file in the&nbsp;</span><span>src</span><span>&nbsp;folder and add the&nbsp;</span><code><span>@tailwind</span></code><span>&nbsp;directives.</span></p>\r\n<pre><code class=\"hljs css\"><span class=\"hljs-at_rule\">@<span class=\"hljs-keyword\">tailwind</span> base</span>;\r\n<span class=\"hljs-at_rule\">@<span class=\"hljs-keyword\">tailwind</span> components</span>;\r\n<span class=\"hljs-at_rule\">@<span class=\"hljs-keyword\">tailwind</span> utilities</span>;</code></pre>\r\n<p><span>Next, create a&nbsp;<code>gatsby-browser.js</code>&nbsp;file at the root of your project and import the created&nbsp;<code>styles/global.css</code>&nbsp;file into it:</span></p>\r\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./src/styles/global.css'</span>\r\n</code></pre>\r\n<p><span>And with that, we are done installing TailwindCSS in our project.</span><span></span></p>\r\n<h2 id=\"setting-up-with-buttercms\"><span>Setting up ButterCMS</span></h2>\r\n<p><span>With Tailwind installed, let's set up our ButterCMS project and create the data that we will be using in our application. To start, we need to create a ButterCMS account, which we can do by clicking on the link</span><a href=\"/join/\"><span>&nbsp;</span><strong>here</strong></a><span><strong>.</strong>&nbsp;Your dashboard should look like the image below after creating a ButterCMS account.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/aA7TnfukQ7OLH0QBi6JZ\" alt=\"ButterCMS account dashboard home page\" width=\"800\" height=\"443\" /></p>\r\n<p><span>Next, we will create an API key that will enable us to make requests to and fetch data from ButterCMS. Go to your account and click on settings.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/K7X7vMiJRxirb7lNtjhH\" alt=\"ButterCMS account settings location\" /></p>\r\n<p><span>The image above shows where to get your API key. The next step is to copy your API key and keep it safe as we will be using it for fetching data.&nbsp;</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/FtYH3P0MSVu756hGBt7o\" alt=\"Read API token in your settings\" /></p>\r\n<p><span>With that done, let's install ButterCMS into our Gatsby project by running the command below:</span></p>\r\n<pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\">npm</span> install buttercms --save</code></pre>\r\n<p><span>Next, navigate to the&nbsp;</span><code><span>gatsby-config.js</span></code><span>&nbsp;file, copy the code below, and paste it in there.</span></p>\r\n<pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'dotenv'</span>).config({\r\n  path: <span class=\"hljs-string\">`.env.<span class=\"hljs-subst\">${process.env.NODE_ENV}</span>`</span>,\r\n});\r\n<span class=\"hljs-built_in\">module</span>.exports = {\r\n  siteMetadata: {\r\n    title: <span class=\"hljs-string\">`butter and gatsby`</span>,\r\n    siteUrl: <span class=\"hljs-string\">`https://www.yourdomain.tld`</span>,\r\n  },\r\n  plugins: [\r\n    <span class=\"hljs-string\">'gatsby-plugin-postcss'</span>,\r\n    {\r\n      resolve: <span class=\"hljs-string\">`gatsby-source-buttercms`</span>,\r\n      options: {\r\n        authToken: process.env.BUTTER_CMS_API_KEY,\r\n      },\r\n    },\r\n  ],\r\n};</code></pre>\r\n<p><span>We are resolving our ButterCMS plugin in the code block above. We are also pointing to the&nbsp;</span><code><span>.env</span></code><span>&nbsp;file that we will create to hold the API key that we got from ButterCMS. Create a&nbsp;</span><span>.<code>env.development</code></span><span>&nbsp;file at the root of the folder and paste your API key into it. It should look like the image below:</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/BVnqdr1RQSIKHR8SDKLI\" alt=\"API key in the .env.development file\" /></p>\r\n<h2 id=\"building-our-components\"><span>Building our components</span></h2>\r\n<p><span>We will be building out the components of our application. As we build out the components, we will immediately import them into the&nbsp;</span><code><span>src/pages/index.js</span></code><span>&nbsp;file so that we can see them in the browser. Let's get started.</span></p>\r\n<h3><span>The Navigation component</span></h3>\r\n<p><span>Create another folder inside the&nbsp;</span><code><span>src</span></code><span>&nbsp;folder and name it the&nbsp;</span><code><span>components</span></code><span>&nbsp;folder. Inside the&nbsp;</span><code><span>components</span></code><span>&nbsp;folder, create a&nbsp;</span><code><span>Navigation.js</span></code><span>&nbsp;file and paste the code below into it:</span></p>\r\n<pre><code class=\"hljs erb\"><span class=\"xml\">import * as React from \"react\";\r\nimport { Link } from \"gatsby\";\r\n\r\nconst Navigation = () =&gt; {\r\n  return (\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"navigationPanel flex bg-zinc-800 justify-between px-4 pr-1 py-2 items-center text-white sm:pr-5\"</span>&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h1</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"text-3xl italic text-green-400\"</span>&gt;</span>KenIs Technologies<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h1</span>&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">nav</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"lg:w-1/4 hidden md:block md:w-1/3\"</span>&gt;</span>\r\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">ul</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"flex justify-between px-5\"</span>&gt;</span>\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"hover:underline hover:scale-105 transition-all duration-200\"</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">Link</span> <span class=\"hljs-attribute\">to</span>=<span class=\"hljs-value\">\"/\"</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">Link</span>&gt;</span>\r\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"hover:underline hover:scale-105 transition-all duration-200\"</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">Link</span> <span class=\"hljs-attribute\">to</span>=<span class=\"hljs-value\">\"/about\"</span>&gt;</span>About<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">Link</span>&gt;</span>\r\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\r\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"hover:underline hover:scale-105 transition-all duration-200\"</span>&gt;</span>\r\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">Link</span> <span class=\"hljs-attribute\">to</span>=<span class=\"hljs-value\">\"/contact\"</span>&gt;</span>Contact<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">Link</span>&gt;</span>\r\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\r\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">ul</span>&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">nav</span>&gt;</span>\r\n\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">button</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"shopNowButton text-white bg-emerald-500 py-3 px-2 rounded-2xl text-lg md:bg-green-400 md:text-black hover:scale-105 transition-all duration-300\"</span>&gt;</span>\r\n        Shop Now\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">button</span>&gt;</span>\r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Navigation;\r\n</span></code></pre>\r\n<p><span>The code above is for the navbar section of our application. The code above will look like the image below:</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/Fze0rgNRheaHopVAZzlo\" alt=\"Rendered header\" class=\"butter-float-left\" /></p>\r\n<h3><span>The Welcome component</span></h3>\r\n<p><span>Create a&nbsp;</span><code><span>Welcome.js</span></code><span>&nbsp;file in the&nbsp;</span><code><span>components</span></code><span>&nbsp;folder and paste the code below into it:</span></p>\r\n<pre><code class=\"hljs erb\"><span class=\"xml\">import * as React from \"react\";\r\n\r\nconst Welcome = () =&gt; {\r\n  return (\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"welcomePanel flex flex-col justify-center items-center bg-slate-800 h-2/3 text-white\"</span>&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">h2</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"text-4xl mb-5 text-green-400\"</span>&gt;</span>\r\n        Welcome to KenIs technologies\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">h2</span>&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"text-xl w-3/4 md:w-1/2 text-center mb-5\"</span>&gt;</span>\r\n        We are a software development company, that deal in all kind of tech\r\n        gadgets, from LED monitors to customizable photochromic lens to protect\r\n        your eyes during screentime.Lorem ipsum dolor sit, amet consectetur adipisicing elit. Aliquam\r\n        assumenda aliquid magni laudantium consectetur ut eius tenetur sequi\r\n        velit voluptate!\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\r\n\r\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"flex pt-8\"</span>&gt;</span>\r\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">button</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"bg-green-400 py-3 px-2 rounded-xl text-black mr-5 text-lg hover:text-red\"</span>&gt;</span>\r\n          Shop Now\r\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">button</span>&gt;</span>\r\n \r\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">button</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"bg-green-400 py-3 px-2 rounded-xl text-black text-lg\"</span>&gt;</span>\r\n          Dream it\r\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">button</span>&gt;</span>\r\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n</span></code></pre>\r\n<p><span>The code above is responsible for the welcome part of our application which looks something like the image below:</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/RkGeWUXnSoS7YSFvOZ93\" alt=\"Rendered welcome component\" width=\"805\" height=\"261\" /></p>\r\n<h3><span>The Items components</span></h3>\r\n<p><span>This component will be in charge of displaying the services and products of our company. Create an&nbsp;</span><code><span>Items.js</span></code><span>&nbsp;file in the&nbsp;</span><code><span>components</span></code><span>&nbsp;folder and paste the code below into it:</span></p>\r\n<pre><code class=\"hljs coffeescript\">import * as React from <span class=\"hljs-string\">\"react\"</span>;\r\nimport pic1 from <span class=\"hljs-string\">\"../images/gadget1.jpeg\"</span>;\r\nimport pic2 from <span class=\"hljs-string\">\"../images/gadget2.jpeg\"</span>;\r\nimport pic3 from <span class=\"hljs-string\">\"../images/gadget3.jpeg\"</span>;\r\nimport pic4 from <span class=\"hljs-string\">\"../images/gadget4.jpeg\"</span>;\r\nimport pic5 from <span class=\"hljs-string\">\"../images/gadget5.jpeg\"</span>;\r\nimport pic6 from <span class=\"hljs-string\">\"../images/gadget6.jpeg\"</span>;\r\n\r\nconst Items = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\r\n  const blogs = [\r\n    {\r\n      <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">\"Smartphones\"</span>,\r\n      <span class=\"hljs-attribute\">body</span>: <span class=\"hljs-string\">\"Lorem ipsum...\"</span>,\r\n      <span class=\"hljs-attribute\">author</span>: <span class=\"hljs-string\">\"Kene\"</span>,\r\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>,\r\n      <span class=\"hljs-attribute\">imgSrc</span>: pic1,\r\n    },\r\n    {\r\n      <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">\"Rock your World!\"</span>,\r\n      <span class=\"hljs-attribute\">body</span>: <span class=\"hljs-string\">\"Lorem ipsum...\"</span>,\r\n      <span class=\"hljs-attribute\">author</span>: <span class=\"hljs-string\">\"Isaac\"</span>,\r\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">2</span>,\r\n      <span class=\"hljs-attribute\">imgSrc</span>: pic2,\r\n    },\r\n    {\r\n      <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">\"Laptops\"</span>,\r\n      <span class=\"hljs-attribute\">body</span>: <span class=\"hljs-string\">\"Lorem ipsum...\"</span>,\r\n      <span class=\"hljs-attribute\">author</span>: <span class=\"hljs-string\">\"Kene\"</span>,\r\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">3</span>,\r\n      <span class=\"hljs-attribute\">imgSrc</span>: pic3,\r\n    },\r\n    {\r\n      <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">\"Hard drives and hard disks\"</span>,\r\n      <span class=\"hljs-attribute\">body</span>: <span class=\"hljs-string\">\"Lorem ipsum...\"</span>,\r\n      <span class=\"hljs-attribute\">author</span>: <span class=\"hljs-string\">\"Kene\"</span>,\r\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">4</span>,\r\n      <span class=\"hljs-attribute\">imgSrc</span>: pic4,\r\n    },\r\n    {\r\n      <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">\"Game dev tools\"</span>,\r\n      <span class=\"hljs-attribute\">body</span>: <span class=\"hljs-string\">\"Lorem ipsum...\"</span>,\r\n      <span class=\"hljs-attribute\">author</span>: <span class=\"hljs-string\">\"Kene\"</span>,\r\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">5</span>,\r\n      <span class=\"hljs-attribute\">imgSrc</span>: pic5,\r\n    },\r\n    {\r\n      <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">\"Macbooks\"</span>,\r\n      <span class=\"hljs-attribute\">body</span>: <span class=\"hljs-string\">\"Lorem ipsum...\"</span>,\r\n      <span class=\"hljs-attribute\">author</span>: <span class=\"hljs-string\">\"Kene\"</span>,\r\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">6</span>,\r\n      <span class=\"hljs-attribute\">imgSrc</span>: pic6,\r\n    },\r\n  ];\r\n\r\n  <span class=\"hljs-keyword\">return</span> (\r\n    &lt;div className=<span class=\"hljs-string\">\"flex px-8 bg-amber-50 py-24 flex-col\"</span>&gt;\r\n      &lt;h1 className=<span class=\"hljs-string\">\"flex justify-center uppercase text-4xl text-green-600 pb-8 font-bold\"</span>&gt;\r\n        Our products\r\n      &lt;/h1&gt;\r\n\r\n      &lt;div className=<span class=\"hljs-string\">\"items-container w-full flex flex-wrap justify-center lg:w-full xl:w-3/4 xl:m-auto\"</span>&gt;\r\n        {blogs.map(<span class=\"hljs-function\"><span class=\"hljs-params\">(blog)</span> =&gt;</span> (\r\n          &lt;div\r\n            className=<span class=\"hljs-string\">\"px-1 bg-amber-100 m-5 pt-5 pb-10 w-96 flex flex-col items-center rounded-md hover:bg-yellow-100 hover:shadow-sm hover:-translate-y-1 transition-all duration-300\"</span>\r\n            key={blog.id}\r\n          &gt;\r\n            &lt;img className=<span class=\"hljs-string\">\"self-stretch\"</span> src={blog.imgSrc} /&gt;\r\n            &lt;h2 className=<span class=\"hljs-string\">\"text-xl text-green-600 uppercase m-2 font-bold\"</span>&gt;\r\n              {blog.title}\r\n            &lt;/h2&gt;\r\n            &lt;p className=<span class=\"hljs-string\">\"text-lg italic\"</span>&gt;Written <span class=\"hljs-keyword\">by</span> {blog.author} &lt;/p&gt;\r\n          &lt;/div&gt;\r\n        ))}\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  );\r\n};\r\n\r\nexport default Items;</code></pre>\r\n<p><span>The code above is responsible for creating the image below:</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/F2Nkw81T7KC2iPSMTqnw\" alt=\"Rendered items collection\" width=\"805\" height=\"535\" /></p>\r\n<h3><span>The Features component</span></h3>\r\n<p><span>This will be the component that will hold some unique features of the company. Create a&nbsp;</span><code><span>Features.js</span></code><span>&nbsp;file in the folder component and paste the code below into it:</span></p>\r\n<pre><code class=\"hljs coffeescript\">import * as React from <span class=\"hljs-string\">\"react\"</span>;\r\nimport icon from <span class=\"hljs-string\">\"../images/banknote.svg\"</span>;\r\n\r\nconst Features = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\r\n  const feats = [\r\n    {\r\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>,\r\n      <span class=\"hljs-attribute\">imgSrc</span>: icon,\r\n      <span class=\"hljs-attribute\">description</span>: <span class=\"hljs-string\">\"Multiple Payment Options\"</span>,\r\n    },\r\n    {\r\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">2</span>,\r\n      <span class=\"hljs-attribute\">imgSrc</span>: icon,\r\n      <span class=\"hljs-attribute\">description</span>: <span class=\"hljs-string\">\"24/7 Customer Service\"</span>,\r\n    },\r\n    {\r\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">3</span>,\r\n      <span class=\"hljs-attribute\">imgSrc</span>: icon,\r\n      <span class=\"hljs-attribute\">description</span>: <span class=\"hljs-string\">\"Extensive product Information\"</span>,\r\n    },\r\n    {\r\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">4</span>,\r\n      <span class=\"hljs-attribute\">imgSrc</span>: icon,\r\n      <span class=\"hljs-attribute\">description</span>: <span class=\"hljs-string\">\"User reviews on all our products\"</span>,\r\n    },\r\n    { <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attribute\">imgSrc</span>: icon, <span class=\"hljs-attribute\">description</span>: <span class=\"hljs-string\">\"Secure Details\"</span> },\r\n    {\r\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">6</span>,\r\n      <span class=\"hljs-attribute\">imgSrc</span>: icon,\r\n      <span class=\"hljs-attribute\">description</span>: <span class=\"hljs-string\">\"Product filtering and sorting\"</span>,\r\n    },\r\n  ];\r\n\r\n  <span class=\"hljs-keyword\">return</span> (\r\n    &lt;div className=<span class=\"hljs-string\">\"py-24\"</span>&gt;\r\n      &lt;h1 className=<span class=\"hljs-string\">\"flex justify-center uppercase text-4xl text-green-600 pb-8 font-bold\"</span>&gt;\r\n        Our main features\r\n      &lt;/h1&gt;\r\n\r\n      &lt;div className=<span class=\"hljs-string\">\"w-full flex flex-wrap justify-center\"</span>&gt;\r\n        {feats.map(<span class=\"hljs-function\"><span class=\"hljs-params\">(feat)</span> =&gt;</span> (\r\n          &lt;div className=<span class=\"hljs-string\">\"px-1 bg-amber-50 m-5 mb-8 pt-5 pb-10 w-96 flex flex-col items-center rounded-md hover:bg-amber-100 hover:-translate-y-1 transition-all duration-300\"</span>&gt;\r\n            &lt;img className=<span class=\"hljs-string\">\"mb-5\"</span> src={feat.imgSrc} /&gt;\r\n            &lt;h2 className=<span class=\"hljs-string\">\"text-lg italic\"</span>&gt;{feat.description}&lt;/h2&gt;\r\n          &lt;/div&gt;\r\n        ))}\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  );\r\n};\r\n\r\nexport default Features;</code></pre>\r\n<p><span>The code above will render the image below on the browser</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/ZockELLnSUyLQdp9KEwi\" alt=\"Rendered features component\" width=\"794\" height=\"331\" /></p>\r\n<h3><span>The Extra component</span></h3>\r\n<p><span>This section will showcase some other services our company offers and which we want to include in our landing page.</span></p>\r\n<pre><code class=\"hljs coffeescript\">import * as React from <span class=\"hljs-string\">\"react\"</span>;\r\nimport pic1 from <span class=\"hljs-string\">\"../images/gadget1.jpeg\"</span>;\r\nimport pic2 from <span class=\"hljs-string\">\"../images/gadget5.jpeg\"</span>;\r\nimport pic3 from <span class=\"hljs-string\">\"../images/gadget6.jpeg\"</span>;\r\n\r\nconst Extra = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\r\n  const offers = [\r\n    {\r\n      <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">\"Software engineering internships\"</span>,\r\n      <span class=\"hljs-attribute\">body</span>: <span class=\"hljs-string\">\"We offer Internships to students who are registered with us and complete our training programme and pass with flying colours\"</span>,\r\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">1</span>,\r\n      <span class=\"hljs-attribute\">imgSrc</span>: pic1,\r\n    },\r\n    {\r\n      <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">\"Mentorship programmes\"</span>,\r\n      <span class=\"hljs-attribute\">body</span>: <span class=\"hljs-string\">\"As a techie, you may often be confused, need some professional guidance or perhaps someone to teach you about the real-world dev life. Enroll in our mentorship programme today!\"</span>,\r\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">2</span>,\r\n      <span class=\"hljs-attribute\">imgSrc</span>: pic2,\r\n    },\r\n    {\r\n      <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">\"Councelling\"</span>,\r\n      <span class=\"hljs-attribute\">body</span>: <span class=\"hljs-string\">\"We offer career and mental to anyone who needs it for no cost at all. E no easy to live for Naija, and we understand. Book a councelling session now!\"</span>,\r\n      <span class=\"hljs-attribute\">author</span>: <span class=\"hljs-string\">\"Kene\"</span>,\r\n      <span class=\"hljs-attribute\">id</span>: <span class=\"hljs-number\">3</span>,\r\n      <span class=\"hljs-attribute\">imgSrc</span>: pic3,\r\n    },\r\n  ];\r\n\r\n  <span class=\"hljs-keyword\">return</span> (\r\n    &lt;div className=<span class=\"hljs-string\">\"flex px-8 bg-amber-50 py-24 flex-col\"</span>&gt;\r\n      &lt;h1 className=<span class=\"hljs-string\">\"flex justify-center uppercase text-4xl text-green-600 pb-8 font-bold\"</span>&gt;\r\n        More from us\r\n      &lt;/h1&gt;\r\n\r\n      &lt;div className=<span class=\"hljs-string\">\"items-container w-full flex flex-wrap justify-center\"</span>&gt;\r\n        {offers.map(<span class=\"hljs-function\"><span class=\"hljs-params\">(offer)</span> =&gt;</span> (\r\n          &lt;div\r\n            className=<span class=\"hljs-string\">\"px-0 bg-amber-100 m-5 pt-0 pb-10 w-96 flex flex-col items-center rounded-lg overflow-hidden hover:bg-amber-200 hover:-translate-y-1 transition-all duration-300\"</span>\r\n            key={offer.id}\r\n          &gt;\r\n            &lt;img className=<span class=\"hljs-string\">\"self-stretch\"</span> src={offer.imgSrc} /&gt;\r\n            &lt;h2 className=<span class=\"hljs-string\">\"text-xl text-green-600 uppercase m-2 font-bold text-center\"</span>&gt;\r\n              {offer.title}\r\n            &lt;/h2&gt;\r\n            &lt;p className=<span class=\"hljs-string\">\"text-lg italic px-3 text-center mt-3\"</span>&gt;\r\n              {offer.body}{<span class=\"hljs-string\">\" \"</span>}\r\n            &lt;/p&gt;\r\n          &lt;/div&gt;\r\n        ))}\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  );\r\n};\r\n\r\nexport default Extra;\r\n</code></pre>\r\n<p><span>The code above will render the image below on the browser:</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/qSCZ1gqcTduAMZ84d5Y5\" alt=\"Rendered extra component\" width=\"809\" height=\"244\" /></p>\r\n<h2 id=\"create-the-welcome-component-in-buttercms\"><span>Create the Welcome component in ButterCMS</span></h2>\r\n<p><span>Navigate to the ButterCMS dashboard and then go to components:</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/3hncFIcORaeKRpNATBBq\" alt=\"Navigate to ButterCMS components\" width=\"597\" height=\"559\" /></p>\r\n<p><span>Delete the default components created by ButterCMS and let's create our first component which will be the Welcome component. Click on the New Content Type button and select Component from the drop-down menu as shown in the image below:</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/GdphONER9qw54IFuufwe\" alt=\"Select the New Content Type button and then select component from the drop down menu\" width=\"809\" height=\"108\" /></p>\r\n<p><span>&nbsp;Add the following fields:</span></p>\r\n<ul>\r\n<li aria-level=\"1\"><span><code><strong>Short text</strong></code></span><span>&nbsp;as&nbsp;</span><code><strong><span>Header</span></strong></code></li>\r\n<li aria-level=\"1\"><code><strong><span>Long text</span></strong></code><span>&nbsp;as&nbsp;</span><code><strong><span>Description</span></strong></code></li>\r\n</ul>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/XXFDoY4LRbS2IQxp73Cv\" alt=\"Header content fields configuration in buttercms\" /></p>\r\n<p><span>Click on Create Component at the top of the page and add the name you want for the component.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/C2YaShHRHGGZCeg5EyTW\" alt=\"Name welcome component and add Meta data\" /></p>\r\n<p><span>Next, navigate to the Pages tab.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/2x2cSvYTUq3HSEVgDzNA\" alt=\"Navigate to the Pages tab\" /></p>\r\n<p><span>Click on New Page, then click on&nbsp; Create New Page. Click on Component, and then click Add from Library.&nbsp;</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/aApiM6bnQ8qAsUiiBTVX\" alt=\"Configure a new page for the landing page\" /></p>\r\n<p><span>Select the newly created Welcome component and then proceed to save the Page Metadata.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/X0zQFBqRSAqXRu9SBavz\" alt=\"Name landing page home page and give it meta data\" /></p>\r\n<p><span>Next, fill in the fields with the same data from the Welcome component that we created in our Gatsby application.</span></p>\r\n<p><span><img loading=\"lazy\" src=\"https://cdn.buttercms.com/aiB1A4GER26YX61N3HoZ\" alt=\"Add content to the welcome component\" /></span></p>\r\n<p></p>\r\n<p><span>Click on the Publish button to save the changes. Now, let's test the API which we will be making our requests to.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/wvXZV5TDS6yU9wK9py18\" alt=\"API explorer for welcome component in buttercms\" /></p>\r\n<p><span>When we click on API Explorer, we can see the results posted and how we can make a fetch request to it.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/dyeinnqVTKaZ5wwS3YmC\" alt=\"api explorer json response for welcome component\" /></p>\r\n<p><span>Now, all we need to do is navigate to our code editor and make a request for the data. Let's do so in the&nbsp;</span><code><span>Welcome.js</span></code><span>&nbsp;file which will be covered in the next section.&nbsp;</span></p>\r\n<p><span><a href=\"/gatsbyjs-cms/\" title=\"Gatsby CMS banner CTA\" rel=\"follow\"><img loading=\"lazy\" src=\"https://cdn.buttercms.com/ldsvyUQqOBQOtCVbstJw\" alt=\"banner-cta-gatsby-border.webp\" /></a></span></p>\r\n<h2 id=\"fetching-the-components-from-buttercms\"><span>Fetching the components from ButterCMS</span></h2>\r\n<p><span>This section will cover how to fetch the created component from ButterCMS into our Gatsby application. Copy the code below and update the&nbsp;</span><span><code>Welcome.js</code>&nbsp;</span><span>file.</span></p>\r\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\r\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'axios'</span>;\r\n<span class=\"hljs-keyword\">const</span> URL = <span class=\"hljs-string\">`https://api.buttercms.com/v2/pages/*/home-page?auth_token=<span class=\"hljs-subst\">${process.env.BUTTER_CMS_API_KEY}</span>`</span>;\r\n<span class=\"hljs-keyword\">const</span> Welcome = () =&gt; {\r\n  \r\n  <span class=\"hljs-keyword\">const</span> [data, setData] = React.useState(<span class=\"hljs-literal\">null</span>);\r\n  React.useEffect(() =&gt; {\r\n    axios.get(URL)\r\n      .then(res =&gt; <span class=\"hljs-built_in\">console</span>.log(res?.data?.data?.fields?.welcome_component))\r\n      .catch(err =&gt; <span class=\"hljs-built_in\">console</span>.log(err));\r\n  }, []);\r\n\r\n  <span class=\"hljs-keyword\">return</span> (\r\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"welcomePanel flex flex-col justify-center items-center bg-slate-800 h-2/3 text-white\"</span>&gt;</span>\r\n      // This stays the same \r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\r\n  )</span>;\r\n};\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Welcome;\r\n</code></pre>\r\n<p><span>We installed and imported&nbsp;</span><code><span>axios</span></code><span>&nbsp;to make our request. Next, we defined the URL to which we will be making our requests and then created a way to handle our state. We made a request to the defined URL and then logged the results to the console.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/PtZIFXwWTmu2OkBT0WLS\" alt=\"log results for welcome component into the console\" width=\"806\" height=\"76\" /></p>\r\n<p><span>Now, all we need to do is just pass the data to be rendered on the page.</span></p>\r\n<pre><code class=\"hljs coffeescript\">import * as React from <span class=\"hljs-string\">'react'</span>;\r\nimport axios from <span class=\"hljs-string\">'axios'</span>;\r\nconst URL = `<span class=\"javascript\">https:<span class=\"hljs-comment\">//api.buttercms.com/v2/pages/*/home-page?auth_token=${process.env.BUTTER_CMS_API_KEY}</span></span>`;\r\nconst Welcome = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\r\n  \r\n  const [data, setData] = React.useState(<span class=\"hljs-literal\">null</span>);\r\n  React.useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\r\n    axios.get(URL)\r\n      .<span class=\"hljs-keyword\">then</span>(res =&gt; setData(res?.data?.data?.fields?.welcome_component))\r\n      .<span class=\"hljs-keyword\">catch</span>(err =&gt; <span class=\"hljs-built_in\">console</span>.log(err));\r\n  }, []);\r\n\r\n  <span class=\"hljs-keyword\">return</span> (\r\n    &lt;div className=<span class=\"hljs-string\">\"welcomePanel flex flex-col justify-center items-center bg-slate-800 h-2/3 text-white\"</span>&gt;\r\n      &lt;h2 className=<span class=\"hljs-string\">\"text-4xl mb-5 text-green-400\"</span>&gt;\r\n        {data?.header}\r\n      &lt;/h2&gt;\r\n      &lt;p className=<span class=\"hljs-string\">\"text-xl w-3/4 md:w-1/2 text-center mb-5\"</span>&gt;\r\n        {data?.description}\r\n      &lt;/p&gt;\r\n      &lt;div className=<span class=\"hljs-string\">\"flex pt-8\"</span>&gt;\r\n        &lt;button className=<span class=\"hljs-string\">\"bg-green-400 py-3 px-2 rounded-xl text-black mr-5 text-lg hover:text-red\"</span>&gt;\r\n          Shop Now\r\n        &lt;/button&gt;\r\n        &lt;button className=<span class=\"hljs-string\">\"bg-green-400 py-3 px-2 rounded-xl text-black text-lg\"</span>&gt;\r\n          Dream it\r\n        &lt;/button&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  );\r\n};\r\nexport default Welcome;</code></pre>\r\n<p><span>With that done, we have successfully fetched and rendered our data from ButterCMS.</span></p>\r\n<h2 id=\"creating-and-fetching-the-features-items-and-extra-collections\"><span>Creating and fetching the Features, Items, and Extra collections</span></h2>\r\n<p><span>Since we are mapping through and displaying data in the&nbsp;</span><code><span>Features.js</span></code><span>,&nbsp;</span><span><code>Items.js</code>,</span><span>&nbsp;and&nbsp;</span><code><span>Extra.js</span></code><span>&nbsp;files, we will be making use of the collections part of ButterCMS. You can find out more about why you will want to use ButterCMS collections</span><a href=\"/kb/use-cases-for-buttercms-collections/\"><span>&nbsp;</span><span>here</span></a><span>.</span><span></span></p>\r\n<p><span>Navigate to the Collections tab in the side menu and click on New Item. We will begin with the Extra collection that will hold our different services.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/WErYxxWOTFCzRZkeayaC\" alt=\"Configure extra component\" /></p>\r\n<p><span>Configure your collection to have the following fields:</span></p>\r\n<ul>\r\n<li aria-level=\"1\"><span><strong><code>Media</code></strong></span><span>&nbsp;as&nbsp;</span><span><strong><code>Image</code></strong></span></li>\r\n<li aria-level=\"1\"><span><strong><code>Number</code></strong></span><span>&nbsp;as&nbsp;</span><span><strong><code>Id</code></strong></span></li>\r\n<li aria-level=\"1\"><span><strong><code>Short text</code></strong></span><span>&nbsp;as&nbsp;</span><span><strong><code>Title</code></strong></span></li>\r\n<li aria-level=\"1\"><span><strong><code>Long text</code></strong></span><span>&nbsp;as&nbsp;</span><span><strong><code>body</code></strong></span></li>\r\n</ul>\r\n<p><span>Next, save the collection's name.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/gtOgMZRXQVaEpHVgqixM\" alt=\"Name collection &quot;Extra&quot;\" /></p>\r\n<p><span>Create and configure the following collections by following the steps discussed earlier.</span></p>\r\n<p><span>Configure your Item collection to have the following fields:</span></p>\r\n<ul>\r\n<li aria-level=\"1\"><span><strong><code>Media</code></strong></span><span>&nbsp;as&nbsp;</span><span><strong><code>Image</code></strong></span></li>\r\n<li aria-level=\"1\"><span><strong><code>Number</code></strong></span><span>&nbsp;as&nbsp;</span><code><strong><span>Id</span></strong></code></li>\r\n<li aria-level=\"1\"><span><strong><code>Short text</code></strong></span><span>&nbsp;as&nbsp;</span><span><strong><code>Title</code></strong></span></li>\r\n<li aria-level=\"1\"><span><strong><code>Long text</code></strong></span><span>&nbsp;as&nbsp;</span><span><strong><code>body</code></strong></span></li>\r\n<li aria-level=\"1\"><span><strong><code>Short text</code></strong></span><span>&nbsp;as&nbsp;</span><span><strong><code>author</code></strong></span></li>\r\n</ul>\r\n<p><span>Finally, configure your Features collection to have the following fields:</span></p>\r\n<ul>\r\n<li aria-level=\"1\"><span><strong><code>Media</code></strong></span><span>&nbsp;as&nbsp;</span><span><strong><code>Icon</code></strong></span></li>\r\n<li aria-level=\"1\"><span><strong><code>Number</code></strong></span><span>&nbsp;as&nbsp;</span><span><strong><code>Id</code></strong></span></li>\r\n<li aria-level=\"1\"><span><strong><code>Long text</code></strong></span><span>&nbsp;as&nbsp;</span><span><strong><code>description</code></strong></span></li>\r\n</ul>\r\n<p><span>Now go to the Collections section, select New Item, pick Extra from the drop-down menu, and fill in the data for the Extra collection.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/vA05zCZtRZ6l7UQxLCWr\" alt=\"Add content to extra collection item\" width=\"807\" height=\"541\" /></p>\r\n<p><span>Do the same for as many entries as you have in the&nbsp;</span><code><span>Extra.js</span></code><span>&nbsp;file. Click on the Publish button when done and then click on API Explorer to see the data and how to fetch it.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/VblCjlNT7m1n2vTylXag\" alt=\"extra component api explorer json response\" /></p>\r\n<p><span>Now, go to the&nbsp;</span><code><span>Extra.js</span></code><span>&nbsp;file.</span></p>\r\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\r\n<span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"axios\"</span>;\r\n<span class=\"hljs-keyword\">const</span> URL = <span class=\"hljs-string\">`https://api.buttercms.com/v2/content/extra?auth_token=<span class=\"hljs-subst\">${process.env.BUTTER_CMS_API_KEY}</span>`</span>;\r\n<span class=\"hljs-keyword\">const</span> Extra = () =&gt; {\r\n  <span class=\"hljs-keyword\">const</span> [datas, setDatas] = React.useState([]);\r\n  React.useEffect(() =&gt; {\r\n    axios.get(URL).then((res) =&gt; {\r\n      <span class=\"hljs-built_in\">console</span>.log(res?.data?.data?.extra);\r\n    });\r\n  }, []);\r\n  <span class=\"hljs-keyword\">return</span> (\r\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">className</span>=<span class=\"hljs-value\">\"flex px-8 bg-amber-50 py-24 flex-col\"</span>&gt;</span>\r\n      // This stays the same \r\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\r\n  )</span>;\r\n};\r\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Extra;</code></pre>\r\n<p><span>We defined the URL for our request and created our state.&nbsp; Next, we made a request to the URL and then logged the result to the console.</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/S8BNwaxkRr60LjcVCoiN\" alt=\"made a request to the URL and then logged the result to the console\" width=\"801\" height=\"201\" /></p>\r\n<p><span>Now, pass the data to be rendered.</span></p>\r\n<pre><code class=\"hljs coffeescript\">import * as React from <span class=\"hljs-string\">\"react\"</span>;\r\nimport axios from <span class=\"hljs-string\">\"axios\"</span>;\r\nconst URL = `<span class=\"javascript\">https:<span class=\"hljs-comment\">//api.buttercms.com/v2/content/extra?auth_token=${process.env.BUTTER_CMS_API_KEY}</span></span>`;\r\nconst Extra = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\r\n  const [datas, setDatas] = React.useState([]);\r\n  React.useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\r\n    axios.get(URL).<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">(res)</span> =&gt;</span> {\r\n      setDatas(res?.data?.data?.extra);\r\n    });\r\n  }, []);\r\n  <span class=\"hljs-keyword\">return</span> (\r\n    &lt;div className=<span class=\"hljs-string\">\"flex px-8 bg-amber-50 py-24 flex-col\"</span>&gt;\r\n      &lt;h1 className=<span class=\"hljs-string\">\"flex justify-center uppercase text-4xl text-green-600 pb-8 font-bold\"</span>&gt;\r\n        More from us\r\n      &lt;/h1&gt;\r\n      &lt;div className=<span class=\"hljs-string\">\"items-container w-full flex flex-wrap justify-center\"</span>&gt;\r\n        {datas.map(<span class=\"hljs-function\"><span class=\"hljs-params\">(data)</span> =&gt;</span> (\r\n          &lt;div\r\n            className=<span class=\"hljs-string\">\"px-0 bg-amber-100 m-5 pt-0 pb-10 w-96 flex flex-col items-center rounded-lg overflow-hidden hover:bg-amber-200 hover:-translate-y-1 transition-all duration-300\"</span>\r\n            key={data.id}\r\n          &gt;\r\n            &lt;img className=<span class=\"hljs-string\">\"self-stretch\"</span> src={data.imgSrc} alt=<span class=\"hljs-string\">''</span> /&gt;\r\n            &lt;h2 className=<span class=\"hljs-string\">\"text-xl text-green-600 uppercase m-2 font-bold text-center\"</span>&gt;\r\n              {data.title}\r\n            &lt;/h2&gt;\r\n            &lt;p className=<span class=\"hljs-string\">\"text-lg italic px-3 text-center mt-3\"</span>&gt;\r\n              {data.body}\r\n            &lt;/p&gt;\r\n          &lt;/div&gt;\r\n        ))}\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  );\r\n};\r\nexport default Extra;</code></pre>\r\n<p><span>With that done, we see that the component is still rendering as it should. Now, follow the steps above for creating and fetching the Features and Items collections from ButterCMS.</span><span></span></p>\r\n<p><span>With our progress so far, we should be able to achieve the results below.</span><span></span></p>\r\n<p><span>Welcome component:</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/RkGeWUXnSoS7YSFvOZ93\" alt=\"Rendered welcome component\" width=\"802\" height=\"260\" /></p>\r\n<p><span>Item component:</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/F2Nkw81T7KC2iPSMTqnw\" alt=\"Rendered Item component\" width=\"804\" height=\"534\" /></p>\r\n<p><span>Feature component:</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/ZockELLnSUyLQdp9KEwi\" alt=\"Rendered Feature component\" width=\"809\" height=\"337\" /></p>\r\n<p><span>Extra component:</span></p>\r\n<p><img loading=\"lazy\" src=\"https://cdn.buttercms.com/qSCZ1gqcTduAMZ84d5Y5\" alt=\"Rendered extra component\" width=\"806\" height=\"243\" /></p>\r\n<h2 id=\"closing-thoughts\"><span>Closing thoughts</span></h2>\r\n<p><span>This tutorial covered how to create a landing page with Gatsby and TailwindCSS and how to connect it to ButterCMS, which is an amazing content management system with great performance. We learned how to use ButterCMS pages, components, and collections. We also learned how to manage our page content from ButterCMS.&nbsp;</span></p>\r\n<p><span>Changing or updating content on your page is as easy as updating&nbsp;</span><span>the collection item that is referenced in ButterCMS</span><span>. We used Gatsby in this tutorial because it is a static site generator that comes with benefits such as speed, SEO, security, accessibility, and extensibility. It is also easy to pick up if you already have knowledge of React.&nbsp; You can also take this further by adding some other components like hero images or values which you offer to your landing page. Congratulations on making it to this point and here is a link to the source code for this tutorial on&nbsp;</span><strong><a href=\"https://github.com/ButterCMS/gatsby-landing-page-tutorial\" rel=\"follow noopener\" target=\"_blank\">Github</a>.</strong></p>\r\n<script src=\"chrome-extension://lopnbnfpjmgpbppclhclehhgafnifija/aiscripts/t.js\"></script>\r\n<p><quillbot-extension-portal></quillbot-extension-portal></p>\r\n<script src=\"chrome-extension://lopnbnfpjmgpbppclhclehhgafnifija/aiscripts/script-main.js\"></script>","slug":"landing-page-with-gatsby-and-buttercms"}}]}},"pageContext":{"slug":"landing-page-with-gatsby-and-buttercms"}},"staticQueryHashes":[]}